redis 3.x单机集群配置 下载: 链接：http://pan.baidu.com/s/1dDJdwMt 密码：e7vj
需要 
yum install gcc ruby rubygems 可连网或本地源安装
gem install redis 需要下载：链接：http://pan.baidu.com/s/1hqvqJAk 密码：iyoh

1 	下载redis 3.x
2 	解压 tar -zxvf redis-3.0.3.tar.gz
3 	编译 make
	 安装 make install
4 在/opt/redis/redis-server创建单机集群实例，创建文件夹 
	mkdir 7000
	mkdir 7001
	mkdir 7002
	mkdir 7003
	mkdir 7004
	mkdir 7005
5 修改解压的redis3.0文件夹下的redis.conf,或在实例文件夹下 cd 7000,cd 7001 .... 下 vi redis.conf 添加以下配置
	port 7000
	daemonize yes
	cluster-enabled yes
	cluster-config-file nodes.conf
	cluster-node-timeout 5000
	appendonly yes
	注意修改每个对应文件夹下的端口号

6 启动redis文件 redis-start.sh
#!/bin/sh
cd /opt/redis-server/7000
redis-server redis.conf

cd /opt/redis-server/7001
redis-server redis.conf

cd /opt/redis-server/7002
redis-server redis.conf

cd /opt/redis-server/7003
redis-server redis.conf

cd /opt/redis-server/7004
redis-server redis.conf

cd /opt/redis-server/7005
redis-server redis.conf

7 进入安装redis的src目录执行redis的创建集群命令创建集群
7.1 ./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005
输入yes
如果需要全部重新自动配置,则删除所有的配置好的cluster-config-file,重新启动所有的redis-server,然后重新执行配置命令即可

8 停止redis redis-stop.sh
#!/bin/sh
redis-cli -p 7000 shutdown
redis-cli -p 7001 shutdown
redis-cli -p 7002 shutdown
redis-cli -p 7003 shutdown
redis-cli -p 7004 shutdown
redis-cli -p 7005 shutdown

以上步骤 端口号要对应上
安装完后 
启动可用 redis-start.sh
停止可用 redis-stop.sh


#配置文件redis.conf 
slave-read-only no #配置slave是否只读 yes 只读 no可以写

#master
masterauth foobared #配置密码验证
requirepass foobared #配置密码验证 

#slave
masterauth foobared #配置密码验证
requirepass foobared #配置密码验证 
slaveof 127.0.0.1 6379 #在slave配置master地址

#启动顺序 先master 后 slave

#密码连接 -h IP -p 端口 -a 密码
redis-cli -h 127.0.0.1 -p 6379 -a foobared
redis-cli -h 127.0.0.1 -p 6380 -a foobared
redis-cli -h 127.0.0.1 -p 6381 -a foobared




---------------------------通用配置redis-default.conf---------------------------------------------
#GENERAL
#是否开启守护进程 yes 是
daemonize no
tcp-backlog 511
timeout 0
tcp-keepalive 0
loglevel notice
databases 16
dir /opt/redis/data
slave-serve-stale-data yes
#slave只读
slave-read-only yes
#not use default
repl-disable-tcp-nodelay yes
slave-priority 100
#打开aof持久化
appendonly yes
#每秒一次aof写
appendfsync everysec
#关闭在aof rewrite的时候对新的写操作进行fsync
no-appendfsync-on-rewrite yes
auto-aof-rewrite-min-size 64mb
lua-time-limit 5000
#打开redis集群
cluster-enabled yes
#节点互连超时的阀值
cluster-node-timeout 15000
cluster-migration-barrier 1
slowlog-log-slower-than 10000
slowlog-max-len 128
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-entries 512
list-max-ziplist-value 64
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes
---------------------------每个实例配置配置---------------------------------------------
#包含通用配置
include /opt/redis-server/redis-default.conf
#监听tcp端口
port 7000
#最大可用内存
maxmemory 100m
#内存耗尽时采用的淘汰策略:
# volatile-lru -> remove the key with an expire set using an LRU algorithm
# allkeys-lru -> remove any key accordingly to the LRU algorithm
# volatile-random -> remove a random key with an expire set
# allkeys-random -> remove a random key, any key
# volatile-ttl -> remove the key with the nearest expire time (minor TTL)
# noeviction -> don't expire at all, just return an error on write operations
maxmemory-policy allkeys-lru
#aof存储文件
appendfilename "appendonly-7000.aof"
#rdb文件,只用于动态添加slave过程
dbfilename dump-7000.rdb
#cluster配置文件(启动自动生成)
cluster-config-file nodes-7000.conf
#部署在同一机器的redis实例，把auto-aof-rewrite搓开，防止瞬间fork所有redis进程做rewrite,占用大量内存
auto-aof-rewrite-percentage 80-100
